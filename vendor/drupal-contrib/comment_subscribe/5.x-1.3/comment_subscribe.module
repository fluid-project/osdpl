<?php
// $Id: comment_subscribe.module,v 1.1.2.4 2008/12/22 11:45:05 zyxware Exp $

/**
 * @file
 * This module provides comment followup e-mail notification for
 * anonymous as well as registered users.
 */
//The mail to be send for the users
define('DEFAULT_MAILTEXT', '
Hi !name,

!commname has commented on: "!node_title"

The post is about
----
!node_teaser
----

You can view the comment at the following url
!comment_url

You can stop receiving emails when someone replies to this blog post,
by going to !link1

You can stop receiving emails when someone replies to your comment,
by going to !link2

If you have an account at the site and if you have auto-blog-following enabled in your account, you will receive emails like this for all replies to a blog post you commented on. You can disable this unchecking the flag at the time you post the comment.


Thanks for your feedback,

Webmaster of !site
!mission
!uri
');
//The mail to be send for the author
define('DEFAULT_AUTHOR_MAILTEXT', '
Hi !name,

!commname has commented on: "!node_title"


You can view the comment at the following url
!comment_url

You can stop receiving emails when someone replies to this blog post,
by going to !link1

Thanks for your feedback,

Webmaster of !site
!mission
!uri
');

/**
 * Implementation of hook_help().
 */
function comment_subscribe_help($section) {
  
  switch ($section) {
    case 'admin/modules#description':
      return t('Comment follow-up e-mail notification for anonymous as well as registered users.');
      break;
  }
}

/**
 * Insert our checkbox, and populate fields.
 * set validation hook.
 */
function comment_subscribe_form_alter($form_id, &$form) {
  
  global $user;
  //Checking whether the form is comment_form or not.
  if ( $form_id == 'comment_form' ) {
    $op = isset($_POST['op']) ? $_POST['op'] : '';
    if ( $op == t('Preview comment') ) {
      drupal_set_message(t('ATTENTION: your comment is NOT YET posted -please click the post button to confirm your post' ) );
       //extra submit button on top
      if (!form_get_errors() && ((variable_get('comment_preview', COMMENT_PREVIEW_REQUIRED) == COMMENT_PREVIEW_OPTIONAL) || ($op == t('Preview comment')) || ($op == t('Post comment')))) {
        $form['submitextra'] = array(
            '#type' => 'fieldset',
            '#title' => t('Comment is not posted yet - please click post button to confirm your post'),
            '#weight' => -99,
            '#collapsible' => FALSE
        );
        $form['submitextra']['submit'] = array('#type' => 'submit',
          '#value' => t('Post comment'), '#weight' => -20);
      }
    }
    if ( variable_get( "comment_subscribe_node_alert", FALSE ) ) {
        $form['commentsubscribenode'] = array(
          '#type' => 'checkbox',
          '#prefix' => '<div id = "comment_suscribe">',
    	  '#suffix' => '</div>', 
          '#title' => t('Email me about all replies to this article.'), 
          '#default_value' => ($user->uid != 0)?$user->comment_subscribe_mailalert:variable_get("comment_subscribe_default_anon_mailalert", FALSE)
        );
    }
    else  if ( ($user->uid == 0) || ( variable_get("comment_subscribe_regged_checkbox", TRUE) ) ) {
      $form['commentsubscribe'] = array(
        '#type' => 'checkbox',
    	'#prefix' => '<div id = "comment_suscribe">',
    	'#suffix' => '</div>',       
        '#title' => t('Email me about replies to this comment.'), 
         '#default_value' => ($user->uid != 0)?$user->comment_subscribe_mailalert:variable_get
        ("comment_subscribe_default_anon_mailalert", TRUE)
      );
    }
    else {
      $form['commentsubscribe'] = array(
      '#type' => 'hidden',
      '#title' => t('Mail me updates to this comment.'), 
      '#default_value' => $user->comment_subscribe_mailalert
      );
    }
    if ( $form['cid']['#value'] != '' )  {
      //Get the subscribe status of current comment from z_commentsubscribe table
      $subsrberslt = db_fetch_object(db_query("SELECT subscribe,subscribenode FROM
      {z_commentsubscribe} 
      WHERE cid = %d", arg(2)));
      $subscribestatus = $subsrberslt->subscribe;
      $subscribenodestatus = $subsrberslt->subscribenode;   
      $form['commentsubscribe']['#default_value'] =  $subscribestatus;
      $form['commentsubscribenode']['#default_value'] =  $subscribenodestatus;
    }
  }
  else if ($form['#id'] == 'node-form' ) {
      $subsrberslt = db_fetch_object(db_query("SELECT nodesubscribe FROM
      {z_nodesubscribe} WHERE nid = %d", arg(1)));
      $subscribestatus = $subsrberslt->nodesubscribe;
      $form['nodesubscribe'] = array(
        '#type' => 'checkbox',
        '#prefix' => '<div id = "comment_suscribe">',
    	'#suffix' => '</div>', 
        '#title' => t('Email me about replies to this node.'), 
         '#default_value' => ($user->uid != 0?$subscribestatus:1)
    );
    
  }
  else {
    return;
  }

}

/**
 * Implementation of hook_menu().
 */
function comment_subscribe_menu($may_cache) {
  
  $items = array();
  global $user;
  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/content/comment_subscribe',
      'title' => t('Comment Subscribe'),
      'description' => t('Comment follow-up mail subscription.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('comment_subscribe_settings'),
      'access' => user_access('administer comment_subscribe'),
      'type' => MENU_NORMAL_ITEM,
    );
  }
  else {
    $items[] = array(
      'path' => 'comment_subscribe',
      'title' => t('Comment Subscribe') ,
      'callback' => 'comment_subscribe_page',
      'access' => 1,
      'type' => MENU_CALLBACK);
  }
  return $items;
}

/**
 * Function to unsubscribe the mail
 */
function comment_subscribe_page() {
  global $user;
  $breadcrumb = NULL;
  $op = $_POST["op"];
  $edit = $_POST["edit"];
  $page_content=" ";
  if (empty($op)) {
    $op = arg(1);
  }
  $arg = arg(3);
  switch ($op) {
    case 'disable':
      //Disable followup comments for a particular node by author
      $type = arg(2);
      $key=$arg;
      if ( strcmp($type, 'nodecomments') == 0 ) {
        db_query("UPDATE {z_nodesubscribe} z 
          SET z.nodesubscribe = 0
          WHERE z.nid = %d ", $arg);
        drupal_set_message(t("Your comment follow up subscription for 
        this node was disabled. Thanks"));
        $title = t('Disabled comment follow up subscription feature
        for this node');
      }
      //Disable followup comments for a particular node
      else if ( strcmp($type, 'nodepost') == 0 ) {
        if ( $GLOBALS['db_type']=='pgsql') {
          db_query("
          UPDATE {z_commentsubscribe} cs set subscribe=0 , subscribenode = 0 
          WHERE cs.cid in (SELECT c.cid from {comments} c inner join {users} u on c.uid=u.uid and c.nid= %d 
          AND md5(case when length(c.mail)<1 then u.mail else c.mail end) = '%s')", $arg, arg(4));
        }
        else {
          db_query("UPDATE {comments} c , {users} u ,
          {z_commentsubscribe} cs
          SET cs.subscribe = 0, cs.subscribenode = 0 
          WHERE c.cid=cs.cid AND c.uid = u.uid
          AND c.nid = %d AND md5(IF( LENGTH( c.mail ) <1, u.mail,
          c.mail ) ) = '%s'", $arg, arg(4));
        }
        drupal_set_message(t("Your comment follow up subscription for this node was disabled. Thanks"));
        $title = t('Disabled comment follow up subscription feature for this node');
      }
      //Disable followup comments for a particular comment
      else {
        //Get the maximum cid for a particular comment of a givenid
         if ( $GLOBALS['db_type']=='pgsql') {
           $lstcid = db_fetch_object(db_query("
           SELECT max(zc.cid) as maxcid FROM {z_commentsubscribe} zc 
            LEFT JOIN {comments} c on c.cid = zc.cid 
             LEFT OUTER JOIN {users} u ON u.uid=c.uid
            WHERE subscribe = 1 AND parents ~ '%s,' 
            AND md5(case when LENGTH( c.mail ) <1 then  u.mail else c.mail end ) = '%s'", $arg, arg(4)));
        }
        else {
          //Get the maximum cid for a particular comment of a givenid
          $lstcid = db_fetch_object(db_query("SELECT max(zc.cid) as 
            maxcid FROM {z_commentsubscribe} zc 
            LEFT JOIN {comments} c on c.cid = zc.cid 
             LEFT OUTER JOIN {users} u ON u.uid=c.uid
             WHERE subscribe = 1 AND instr(parents ,'%s') AND md5(IF( 
            LENGTH( c.mail ) <1, u.mail, c.mail ) ) = '%s'", $arg, arg(4)));
    }
    if ( $lstcid->maxcid )
      $cid =  $lstcid->maxcid;
    else
      $cid = $arg;
    db_query("UPDATE {comments} c , {users} u , {z_commentsubscribe} cs SET cs.subscribe = 0,  cs.subscribenode = 0  WHERE c.cid=cs.cid AND u.uid=c.uid
      AND  c.cid = %d AND md5(IF( LENGTH( c.mail ) <1, u.mail, c.mail ) ) = '%s' ", $cid, arg(4));
    drupal_set_message(t("Your comment follow up subscription for this post was disabled. Thanks"));
    $title = t('Disabled comment follow up subscription feature  for this comment');
      }
    break;
    default;
      $title = t('Comment Subscribe');
      break;
  }
  drupal_set_title($title);
  drupal_set_breadcrumb($breadcrumb);
  print theme("page", $page_content);
}

/** 
 * Save data in the comment_subscribe form.
 */
function comment_subscribe_validate($form_id, $form_values) { 
  if ($form_values['optin']) {
    foreach (array('optin') as $field) {
      $_SESSION['comment_subscribe'][$field] = $form_values[$field];
    }
  } 
  else {
    foreach (array('optin') as $field) {
      unset($_SESSION['comment_subscribe'][$field]);
    }
  }
}
/*
 *Funtion to save the node subscription flag when an author creates a node
 */
function comment_subscribe_nodeapi(&$node, $op, $teaser, $page) {
  
  switch ( $op ) {
     case 'insert':
      $sql = "INSERT INTO {z_nodesubscribe} (nid, uid, nodesubscribe) 
      values(%d, %d, %d)";    
      db_query($sql, $node->nid, $node->uid, $node->nodesubscribe);
     break;
  }

}
/**  
 * Implement comment hook and check the publish status
 */
function comment_subscribe_comment($comment, $op) {
  
  global $user;
  switch ( $op ) {
    case 'publish':
      _comment_subscribe_mailalert( $comment );
      break;
    case 'update':
      //If node subscription is Selected
      if ( variable_get("comment_subscribe_node_alert", FALSE) ) {
        $sql = "UPDATE {z_commentsubscribe} SET subscribenode =%d WHERE 
        cid = %d";    
        db_query($sql, $comment['commentsubscribenode'], $comment['cid']);
      }
      //If comment reply subscription is Selected
      else {
        $sql = "UPDATE {z_commentsubscribe} SET subscribe = %d WHERE 
        cid = %d";    
        db_query($sql, $comment['commentsubscribe'], $comment['cid']);
      }
      break;
    case 'insert':
      //Get pid from comment for current cid ,get the parents for 
      //this cid 
      $notifyval = 0;
       $parentrslt = db_fetch_object(db_query("SELECT pid FROM
      {comments} 
      WHERE cid = %d", $comment['cid']));
      $strparents = $parentrslt->pid .',';
      $prvparnt = db_fetch_object(db_query("SELECT parents FROM     
      {z_commentsubscribe} 
      WHERE cid = %d", $parentrslt->pid));
      $parents = $prvparnt->parents . $strparents;
      //Checking which option is SELECTed ie checking
      //whether node reply or comment reply is chosen.
      //According to the SELECTion flag subscription is saved.
      if ( variable_get("comment_subscribe_node_alert", FALSE ) ) {
        $sql = "INSERT INTO {z_commentsubscribe} (cid, parents, subscribenode) 
        VALUES(%d, '%s', %d)";    
        db_query($sql, $comment['cid'], $parents, $comment['commentsubscribenode']);
      }
      else  {
        $sql = "INSERT INTO {z_commentsubscribe} (cid,parents,subscribe) 
        VALUES(%d, '%s', %d)";    
        db_query($sql, $comment['cid'], $parents, $comment['commentsubscribe']);
      }
      if ( user_access( 'administer comment_subscribe' ) ) {
        $comment = db_fetch_object(db_query("SELECT * FROM {comments} 
        WHERE cid = %d", $comment['cid']));
        _comment_subscribe_mailalert( $comment);
      }
      break;
    case 'delete':
      $sql = "DELETE FROM {z_commentsubscribe} WHERE cid = %d or 
      instr(parents, '%s,') ";    
      db_query($sql, $comment->cid, $comment->cid);
      break;
  }
}
/**
 *Function to send mail to subscribed users if any comment is submitted
 */
function _comment_subscribe_mailalert($comment) {
  
  global $locale;
  global $base_url;
  $initial_locale = $locale;
  if (function_exists('locale')) {
    $languages = locale_supported_languages();
    $languages = $languages['name'];
  }
  $nid = $comment->nid;
  $cid = $comment->cid;
  $commname = $comment->name;
  $commtext = $comment->comment;
  $commsubj = $comment->subject;
  //Get the parents and mailid of a particular comment
  $parentrslt = db_fetch_object(db_query("SELECT parents, 
    IF(length(c.mail)<1, ifNULL(u.mail,u.init),
    c.mail) mail FROM {z_commentsubscribe} zc 
    LEFT JOIN {comments} c on zc.cid = c.cid
    LEFT JOIN {users} u on u.uid = c.uid
    WHERE zc.cid = %d", $cid));
  if ( $parentrslt->parents != NULL ) {
    $arrparents =explode( ',', $parentrslt->parents );
    $parents .= $arrparents[0];
    for ( $i = 1; $i < count($arrparents)-1; $i++ ) {
      $parents .=',';
      $parents .= $arrparents[$i];
    }
    $currmailid = $parentrslt->mail;
    $node = node_load($nid);
    $from = variable_get('site_mail', ini_get('sendmail_from'));
    //Get the mailid of users who subscribed for the comment replies
    //or node comments.
    if ( $GLOBALS['db_type']=='pgsql') {
      $result = db_query(
             "SELECT DISTINCT c.cid,u.init,c.uid,c.name,c.nid, ".
             "  (case when length(c.mail)<1 then coalesce (u.mail,u.init) else c.mail end) AS mail ".
             " FROM {comments} c LEFT OUTER JOIN {users} u ON u.uid=c.uid ".
           " LEFT JOIN {z_commentsubscribe} zc on zc.cid=c.cid ".
             " WHERE nid=%d  AND ((zc.cid IN (%s) AND subscribe=1) OR subscribenode=1 ) AND c.status=0 ".
             "  AND LENGTH(case when LENGTH(c.mail)<1 then coalesce(u.mail,u.init) else c.mail end)>1 ".
             "  AND (case when LENGTH(c.mail)<1 then coalesce(u.mail,u.init) else c.mail end) like '%@%.%' ".
             "  AND (case when LENGTH(c.mail)<1 then coalesce(u.mail,u.init) else c.mail end) <> '%s' ".
             " GROUP BY 1,2,3,4,5,6  ORDER BY mail DESC",
        $nid, $parents, $currmailid
           ); 
    }
    else  {
      $result = db_query('SELECT DISTINCT c.cid,u.init,c.uid,c.name,c.nid,  
        IF(length(c.mail)<1, ifNULL(u.mail,u.init), c.mail) mail
        FROM {comments} c LEFT OUTER JOIN {users} u ON u.uid=c.uid
        LEFT JOIN {z_commentsubscribe} zc on zc.cid=c.cid 
        WHERE nid=%d  AND ((zc.cid IN (%s) AND subscribe=1) OR subscribenode=1 )AND c.status=0
        AND LENGTH(IF(LENGTH(c.mail)<1, ifNULL(u.mail,u.init),c.mail))>1 
        AND IF(LENGTH(c.mail)<1, ifNULL(u.mail,u.init),c.mail) like 
        \'%@%.%\'
        AND IF(LENGTH(c.mail)<1, ifNULL(u.mail,u.init),c.mail) <> \'%s\'
        GROUP BY IF(LENGTH(c.mail)<1, ifNULL(u.mail,u.init),c.mail) ORDER 
        BY mail DESC',
        $nid, $parents, $currmailid
      );
    }
    $count=0;
    while ( $alert = db_fetch_object($result) ) {    
      $mailid = $alert->mail;
      if ( $commname != $alert->name ) {
        if ( function_exists('locale') && $languages[$user->language] ) {
          $locale = $user->language;
        }
        $subject = t('!site :: new comment for your post.', array(
        '!site' => variable_get('site_name', 'drupal')));
        $message = t((variable_get('comment_subscribe_default_mailtext',
        DEFAULT_MAILTEXT)),
        array(
          '!commname' => $commname,
          '!commtext' => $commtext,
          '!commsubj' => $commsubj,
          '!comment_url' => url( 'node/'. $nid, NULL, NULL, 1 ) ."#comment-".
          $cid,
          '!node_title' =>  $node->title,
          '!node_teaser' => $node->teaser, 
          '!mission' => variable_get('site_mission', ''), 
          '!node_body' =>  $node->body, 
          '!name' => $alert->name, 
          '!site' => variable_get('site_name', 'drupal'), 
          '!uri' => $base_url, 
          '!uri_brief' => substr($base_url, strlen('http://')), 
          '!date' => format_date(time()), 
          '!login_uri' => url('user', NULL, NULL, 1), 
          '!edit_uri' => url('user/'. $alert->uid  .'/edit', NULL, NULL, 1
            ),
          '!link1' => url('comment_subscribe/disable/nodepost/'. $nid .'/'.
          md5($mailid), NULL, NULL, 1),
          '!link2' => url('comment_subscribe/disable/postrply/'. $alert->
          cid .'/'. md5($mailid), NULL, NULL, 1),
          )
        );
         $headers = array();
        drupal_mail('comment_subscribe_mail', $mailid, $subject, $message, 
        $from, $headers);
        $count++;
         if ( ($alert->uid)!=0 ) 
          $mylink =l( $mailid , 'user/'. $alert->uid .'/edit') ;
        else
          $mylink =$mailid;
        // Add an entry to the watchdog log.
        watchdog('comment_subscribe', t('Subscribe ') . $mylink, 
        WATCHDOG_NOTICE, l(t('source comment'), 'node/'. $nid, NULL, NULL
        , 'comment-'. $alert->cid));
        // revert to previous (site default) locale
        $locale = $initial_locale;
      }
     
    }
    //Sending mail to author of the post, if he subscribed comments to the node
    if ( $GLOBALS['db_type']=='pgsql') {
      $authorid = db_result(db_query("SELECT  coalesce ( u.mail, u.init )
      mail FROM {users} u LEFT JOIN {node} n ON u.uid = n.uid 
      LEFT JOIN {z_nodesubscribe} z ON z.nid = n.nid 
      WHERE n.nid = %d AND z.nodesubscribe=1 AND mail <> '%s' ", $nid, $currmailid));
    }
    else {
      $authorid = db_result(db_query("SELECT  ifNULL(u.mail,u.init)
      mail FROM {users} u LEFT JOIN {node} n ON u.uid = n.uid 
      LEFT JOIN {z_nodesubscribe} z ON z.nid = n.nid 
      WHERE n.nid = %d AND z.nodesubscribe=1 AND mail <> '%s'", $nid, $currmailid));
    }
    $subject = t('!site :: new comment for your post.', array(
        '!site' => variable_get('site_name', 'drupal')));
    $message = t((variable_get('comment_subscribe_default_author_mailtext',
      DEFAULT_AUTHOR_MAILTEXT)),
      array(
        '!commname' => $commname,
        '!commtext' => $commtext,
        '!commsubj' => $commsubj,
        '!comment_url' => url('node/'. $nid, NULL, NULL, 1) ."#comment-".
        $cid,
        '!node_title' =>  $node->title,
        '!node_teaser' => $node->teaser, 
        '!mission' => variable_get('site_mission', ''), 
        '!node_body' =>  $node->body, 
        '!name' => $alert->name, 
        '!site' => variable_get('site_name', 'drupal'), 
        '!uri' => $base_url, 
        '!uri_brief' => substr($base_url, strlen('http://')), 
        '!date' => format_date(time()), 
        '!login_uri' => url('user', NULL, NULL, 1), 
        '!edit_uri' => url('user/'. $node->uid .'/edit', NULL, NULL, 1
          ),
        '!link1' => url('comment_subscribe/disable/nodecomments/'. $nid, NULL, NULL, 1),
        )
      );    
      $headers = array();        
    drupal_mail('comment_subscribe_mail', $authorid, $subject, $message, 
        $from, $headers);
    if ( $count > 0 )
      drupal_set_message(t("Thanks for your comment! I just sent out %count follow-up mail notifications!", array("%count" => $count)));
  }
}

/**
 * Implementation of hook_user().
 */
function comment_subscribe_user($type, &$edit, &$user, $category = NULL) {
  switch ($type) {

    case 'form':
      if ( $category == 'account' ) {
        $form = array();
        $form['comment_subscribe_settings'] = array(
            '#type' => 'fieldset',
            '#title' => t('Comment follow up subscription settings'),
            '#weight' => 4,
            '#collapsible' => TRUE
            );
        $form['comment_subscribe_settings']['comment_subscribe_mailalert'] = array(
            '#type' => 'checkbox',
            '#title' => t('Receive comment follow-up notification e-mails'),
            '#default_value' => isset($edit['comment_subscribe_mailalert']) ? $edit['comment_subscribe_mailalert'] : 1,
            '#description' => t('Check this box to receive e-mail notification for follow-up comments to comments you posted. ')
            );
        return $form;
      }
      break;
  }
}


/*
 *Function for mail subscription
 */
function comment_subscribe_settings() {
  
  $form['comment_subscribe_settings'] = array();
  $form['comment_subscribe_settings'][
    'comment_subscribe_regged_checkbox'] = array(
    '#type' => 'checkbox',
    '#title' => t('Let registered users save their preferences in their profile.'),
    '#return_value' => 1,
    '#default_value' => variable_get(
    'comment_subscribe_regged_checkbox', TRUE),
    '#description' => t('Letting registered users SELECT/unSELECT if 
    they want to be notified. If this is disabled, this setting is propagated from their user profile, hence reducing
    and clutter and confusion.')
  );
  $form['comment_subscribe_settings'][
    'comment_subscribe_node_alert'] = array(
    '#type' => 'checkbox',
    '#title' => t('Subscribe to node instead of subscribing to comments.'),
    '#return_value' => 1,
    '#default_value' => variable_get(
    'comment_subscribe_node_alert', FALSE),
    '#description' => t('Show a subscribe to node checkbox instead of subscribe to replies. When a user subscribe for a 
    node he will recieve all notification about all the comments to that node. Subscribing to comments sends 
    notification only about replies to that particular comment. Leave unchecked to enable subscribe to replies.')
  );
  $form['comment_subscribe_settings'][
    'comment_subscribe_default_anon_mailalert'] = array(
    '#type' => 'checkbox',
    '#title' => t('Fill checkbox for followup with YES by default for 
    anonymous users, so they will get an email 
    alert for follow up comments if they do not uncheck it then'),
    '#return_value' => 1,
    '#default_value' => variable_get(
    'comment_subscribe_default_anon_mailalert', TRUE),
    '#description' => t('This flag presets the flag for the follow-up 
    notification on the form that anonymous users will 
    see when posting a comment')
  );
  $form['comment_subscribe_settings'][
    'comment_subscribe_default_mailtext'] = array(
    '#type' => 'textarea',
    '#title' => t('Default mail text for sending out the 
    notifications.'),
    '#description' => t("You can use the following variables to be 
    replaced 
    <ul>
    <li>   !commname = the username who posted the comment
    <li>   !commtext = the text of the posted comment
    <li>   !commsubj = the subject of the posted comment
    <li>   !comment_url = the full url of the post and comment - note: 
    if you have paging enabled, this does not work 
    correct - set your max comments per page so that all fit on one 
    page or reverse order them    
    <li>   !node_title = the title of the node that was commented on    
    <li>   !node_teaser = the teaser of the node that was commented 
    on    
    <li>   !node_body = the body of the node that was commented on    
    <li>   !mission = site_mission text    
    <li>   !name = username receiving the alert   
    <li>   !site = your site    
    <li>   !uri = base_url of site   
    <li>   !uri_brief = base_url of site w/o http    
    <li>   !date = the current time    
    <li>   !login_uri  uri to login the user   
    <li>   !edit_uri = uri to edit user profile   
    <li>   !link1 the QUICKLINK to disable future follow-up mail  
    notifications for the article
    <li>   !link2 the QUICKLINK to disable future reply mail 
    notifications for the user's comment
    </ul>"),
    '#default_value' => variable_get(
    'comment_subscribe_default_mailtext', t(DEFAULT_MAILTEXT) ),
    '#return_value' => 1,
    '#cols' => 80,
    '#rows' => 15
  );
  $form['comment_subscribe_settings'][
    'comment_subscribe_default_author_mailtext'] = array(
    '#type' => 'textarea',
    '#title' => t('Default mail text for sending out the 
    notifications to authors.'),
    '#description' => t("You can use the following variables to be 
    replaced 
    <ul>
    <li>   !commname = the username who posted the comment
    <li>   !commtext = the text of the posted comment
    <li>   !commsubj = the subject of the posted comment
    <li>   !comment_url = the full url of the post and comment - note: 
    if you have paging enabled, this does not work 
    correct - set your max comments per page so that all fit on one 
    page or reverse order them    
    <li>   !node_title = the title of the node that was commented on    
    <li>   !node_teaser = the teaser of the node that was commented 
    on    
    <li>   !node_body = the body of the node that was commented on    
    <li>   !mission = site_mission text    
    <li>   !name = username receiving the alert   
    <li>   !site = your site    
    <li>   !uri = base_url of site   
    <li>   !uri_brief = base_url of site w/o http    
    <li>   !date = the current time    
    <li>   !login_uri  uri to login the user   
    <li>   !edit_uri = uri to edit user profile   
    <li>   !link1 the QUICKLINK to disable future follow-up mail  
    notifications for the article
    <li>   !link2 the QUICKLINK to disable future reply mail 
    notifications for the user's comment
    </ul>"),
    '#default_value' => variable_get(
    'comment_subscribe_default_mailtext', t(DEFAULT_MAILTEXT) ),
    '#return_value' => 1,
    '#cols' => 80,
    '#rows' => 15
  );
  
  return system_settings_form($form);
}
/*
 * Function hook_enable
 */
function comment_subscribe_enable() {
  
  $num_rows_result = db_fetch_object(db_query("SELECT count(*) AS num FROM {comments} c"));
  
  if (  $num_rows_result-> num != 0 ) {
    //If comment_subscribe module is enabled in a live site.
    //For previous comments an entry in z_commentsubscribe is 
    //generated using the below code.
    $level = 1;
    $ifcondition = "if(c". $level .".pid <> 0, concat(c". $level .".pid, ','),'')";
    $table = "c". $level;
    $join =NULL;
    
    //First find the level of comments
    do {
     
     if ($level != 1) {
       $prvlevel = $level - 1;
       $join .= " join {comments} c". $level ." on c". $prvlevel .".pid=c". $level .".cid";
     }
     $sql = "SELECT c1.cid, concat('0,', ". $ifcondition ." ) AS parents FROM {comments} c1  ". $join;
     $result = db_fetch_array(db_query($sql));
     if ( $result != NULL ) {
       $origsql = $sql;
       $origjoin = $join;
       $origifcond = $ifcondition;
     }
     $level++;
     $table = "c" . $level;
     $ifcondition = " if(c". $level ." .pid <> 0, concat(c". $level ." . pid, ','),''),". $ifcondition;
    }while ( $result != NULL );
    $sql = str_replace('join', 'left join', $origsql);
    $sql = str_replace('AS parents', 'AS parents, 0 as subscribe, 0 as subscribenode', $sql);
    $sql = "INSERT INTO {z_commentsubscribe} (cid, parents, subscribe, subscribenode) ". $sql ."
    left join {z_commentsubscribe} cs on c1.cid = cs.cid where cs.subscribe is NULL";
    db_query($sql);
    //Insert previous node informations in to the z_nodesubscribe table.
    db_query("INSERT INTO z_nodesubscribe (nid, uid) select nid,uid from node");
  }
}
